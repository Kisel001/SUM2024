//
// plat.js
//
//      Copyright (C) CGSG of PML30. All rights reserved.
//
// Platon module.
//

// Get icosaedr V array
export function getIcoV() {
  return [
    1.0, -0.5, 0.0, 0.794654, -0.187592, 0.57735, 0.809017, 0.5, 0.587785,
    0.794654, -0.187592, 0.57735, 0.309017, -0.5, 0.951057, 0.794654, -0.187592,
    0.57735, -0.309017, 0.5, 0.951057, 0.794654, -0.187592, -0.57735, -0.809017,
    -0.5, 0.587785, 0.794654, -0.187592, -0.57735, -1.0, 0.5, 0.0, 0.794654,
    -0.187592, -0.57735, -0.809017, -0.5, -0.587785, -0.303531, -0.187592,
    -0.934172, -0.309017, 0.5, -0.951057, -0.303531, -0.187592, -0.934172,
    0.309017, -0.5, -0.951057, -0.303531, -0.187592, -0.934172, 0.809017, 0.5,
    -0.587785, -0.982247, -0.187592, 0.0, 1.0, -0.5, 0.0, -0.982247, -0.187592,
    0.0, 0.809017, 0.5, 0.587785, -0.982247, -0.187592, 0.0, 0.309017, -0.5,
    0.951057, -0.303531, -0.187592, 0.934172, -0.309017, 0.5, 0.951057,
    -0.303531, -0.187592, 0.934172, -0.809017, -0.5, 0.587785, -0.303531,
    -0.187592, 0.934172, -1.0, 0.5, 0.0, 0.794654, -0.187592, 0.57735,
    -0.809017, -0.5, -0.587785, 0.794654, -0.187592, 0.57735, -0.309017, 0.5,
    -0.951057, 0.794654, -0.187592, 0.57735, 0.309017, -0.5, -0.951057,
    0.794654, -0.187592, -0.57735, 0.809017, 0.5, -0.587785, 0.794654,
    -0.187592, -0.57735, 1.0, -0.5, 0.0, 0.794654, -0.187592, -0.57735,
    0.809017, 0.5, 0.587785, -0.303531, -0.187592, -0.934172, 0.309017, -0.5,
    0.951057, -0.303531, -0.187592, -0.934172, -0.309017, 0.5, 0.951057,
    -0.303531, -0.187592, -0.934172, -0.809017, -0.5, 0.587785, -0.982247,
    -0.187592, -0.0, -1.0, 0.5, 0.0, -0.982247, -0.187592, -0.0, -0.809017,
    -0.5, -0.587785, -0.982247, -0.187592, -0.0, -0.309017, 0.5, -0.951057,
    -0.303531, -0.187592, 0.934172, 0.309017, -0.5, -0.951057, -0.303531,
    -0.187592, 0.934172, 0.809017, 0.5, -0.587785, -0.303531, -0.187592,
    0.934172, 1.0, -0.5, 0.0, 0.491123, -0.794654, 0.356822, 0.809017, 0.5,
    0.587785, -0.187592, -0.794654, -0.57735, 0.309017, -0.5, 0.951057,
    0.491123, -0.794654, 0.356822, -0.309017, 0.5, 0.951057, -0.187592,
    -0.794654, -0.57735, -0.809017, -0.5, 0.587785, -0.607062, -0.794654, -0.0,
    -1.0, 0.5, 0.0, 0.491123, -0.794654, 0.356822, -0.809017, -0.5, -0.587785,
    -0.607062, -0.794654, -0.0, -0.309017, 0.5, -0.951057, 0.491123, -0.794654,
    0.356822, 0.309017, -0.5, -0.951057, 0.491123, -0.794654, -0.356822,
    0.809017, 0.5, -0.587785, -0.607062, -0.794654, 0.0, 1.0, -0.5, 0.0,
    0.491123, -0.794654, -0.356822, 0.809017, 0.5, 0.587785, -0.607062,
    -0.794654, 0.0, 0.309017, -0.5, 0.951057, -0.187592, -0.794654, 0.57735,
    -0.309017, 0.5, 0.951057, 0.491123, -0.794654, -0.356822, -0.809017, -0.5,
    0.587785, -0.187592, -0.794654, 0.57735, -1.0, 0.5, 0.0, 0.491123,
    -0.794654, -0.356822, -0.809017, -0.5, -0.587785, -0.187592, -0.794654,
    -0.57735, -0.309017, 0.5, -0.951057, -0.187592, -0.794654, 0.57735,
    0.309017, -0.5, -0.951057, -0.187592, -0.794654, -0.57735, 0.809017, 0.5,
    -0.587785, -0.187592, -0.794654, 0.57735, 0.0, 1.118034, 0.0, -0.187592,
    -0.794654, -0.57735, 0.0, 1.118034, 0.0, 0.491123, -0.794654, 0.356822, 0.0,
    1.118034, 0.0, -0.607062, -0.794654, 0.0, 0.0, 1.118034, 0.0, 0.491123,
    -0.794654, -0.356822, 0.0, 1.118034, 0.0, -0.187592, -0.794654, 0.57735,
    0.0, -1.118034, 0.0, 0.491123, -0.794654, 0.356822, 0.0, -1.118034, 0.0,
    -0.607062, -0.794654, -0.0, 0.0, -1.118034, 0.0, 0.491123, -0.794654,
    -0.356822, 0.0, -1.118034, 0.0, -0.187592, -0.794654, 0.57735, 0.0,
    -1.118034, 0.0, -0.187592, -0.794654, -0.57735,
  ];
}

// Get icosaedr I
export function getIcoI() {
  return [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 55, 34, 36, 56, 38, 40, 57, 42,
    44, 58, 46, 48, 59, 31, 33, 50, 35, 37, 51, 39, 41, 52, 43, 45, 53, 47, 49,
    54,
  ];
}

// Get dodecaedr V
export function getDecV() {
  const V = new getIcoV();
  const I = new getIcoI();

  let V1 = [];

  for (let i = 0; i < 60; i += 3) {
    const S1 = V[6 * I[i]];
    const S2 = V[6 * I[i] + 1];
    const S3 = V[6 * I[i] + 2];
    const S4 = V[6 * I[i + 1]];
    const S5 = V[6 * I[i + 1] + 1];
    const S6 = V[6 * I[i + 1] + 2];
    const S7 = V[6 * I[i + 2]];
    const S8 = V[6 * I[i + 2] + 1];
    const S9 = V[6 * I[i + 2] + 2];

    const S10 = (S1 + S4 + S7) / 3;
    const S11 = (S2 + S5 + S8) / 3;
    const S12 = (S3 + S6 + S9) / 3;

    V1.push(S10);
    V1.push(S11);
    V1.push(S12);
    V1.push(0);
    V1.push(0);
    V1.push(0);

    V1.push(S10);
    V1.push(S11);
    V1.push(S12);
    V1.push(0);
    V1.push(0);
    V1.push(0);

    V1.push(S10);
    V1.push(S11);
    V1.push(S12);
    V1.push(0);
    V1.push(0);
    V1.push(0);
  }

  return V1;
}

export function getDecoI() {
  let S = [];
  let A, B, C, D, E;

  let I = [
    1, 18, 15, 1, 15, 7, 1, 7, 4, 13, 4, 7, 13, 7, 0, 13, 0, 10, 3, 0, 10, 3,
    10, 12, 3, 12, 6, 12, 6, 9, 12, 9, 2, 12, 2, 14, 11, 14, 2, 11, 2, 5, 11, 5,
    8, 8, 1, 4, 8, 4, 13, 8, 13, 11, 11, 14, 12, 11, 12, 10, 11, 10, 13, 0, 7,
    15, 0, 15, 17, 0, 17, 3, 6, 3, 17, 6, 17, 19, 6, 19, 9, 2, 9, 19, 2, 19, 16,
    2, 16, 5, 1, 8, 5, 1, 5, 16, 1, 16, 18, 18, 16, 19, 18, 19, 17, 18, 17, 15,
  ];
  let I1N = [
    1, 18, 15, 7, 4, 13, 4, 7, 0, 10, 3, 0, 10, 12, 6, 12, 6, 9, 2, 14, 11, 14,
    2, 5, 8, 8, 1, 4, 13, 11, 11, 14, 12, 10, 13, 0, 7, 15, 17, 3, 6, 3, 17, 19,
    9, 2, 9, 19, 16, 5, 1, 8, 5, 16, 18, 18, 16, 19, 17, 15,
  ];

  let NewI = [];

  for (let i = 0; i < 108; i++) S[i] = 0;

  for (let i = 0; i < 70; i += 5) {
    let S1 = I1N[i],
      S2 = I1N[i + 1],
      S3 = I1N[i + 2],
      S4 = I1N[i + 3],
      S5 = I1N[i + 4];

    A = S[S1]++;
    B = S[S2]++;
    C = S[S3]++;
    D = S[S4]++;
    E = S[S5]++;

    S1 *= 3;
    S2 *= 3;
    S3 *= 3;
    S4 *= 3;
    S5 *= 3;

    if (A == 0);
    else if (A == 1) ++S1;
    else if (A == 2) S1 += 2;

    if (B == 0);
    else if (B == 1) ++S2;
    else if (B == 2) S2 += 2;

    if (C == 0);
    else if (C == 1) ++S3;
    else if (C == 2) S3 += 2;

    if (D == 0);
    else if (D == 1) ++S4;
    else if (D == 2) S4 += 2;

    if (E == 0);
    else if (E == 1) ++S5;
    else if (E == 2) S5 += 2;

    NewI.push(S1);
    NewI.push(S2);
    NewI.push(S3);
    NewI.push(S1);
    NewI.push(S3);
    NewI.push(S4);
    NewI.push(S1);
    NewI.push(S4);
    NewI.push(S5);
  }

  //for (let Elem of I) {
  //  let S1 = Elem * 3;

  //   A = S[Elem]++;

  //   if (A == 0);
  //   else if (A == 1) ++S1;
  //   else if (A == 2) S1 += 2;
  //
  //  NewI.push(S1);
  //}

  return NewI;
}

export function getTetraV() {
  return [
    -1, -1, -1, 0, 0, 0, -1, -1, -1, 0, 0, 0, -1, -1, -1, 0, 0, 0, -1, 1, 1, 0,
    0, 0, -1, 1, 1, 0, 0, 0, -1, 1, 1, 0, 0, 0, 1, 1, -1, 0, 0, 0, 1, 1, -1, 0,
    0, 0, 1, 1, -1, 0, 0, 0, 1, -1, 1, 0, 0, 0, 1, -1, 1, 0, 0, 0, 1, -1, 1, 0,
    0, 0,
  ];
}

export function getTetraI() {
  return [0, 3, 9, 1, 4, 6, 5, 7, 10, 2, 11, 8];
}

export function getOctaV() {
  return [
    0, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0,

    0, -1, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0, 0, 0,

    0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,

    0, -1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, 0, 0,

    0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0,

    0, 1, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0, 0, 0,

    0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,

    0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, 0, 0,
  ];
}

export function getOctaI() {
  return [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
    21, 22, 23,
  ];
}

// End of 'plat.js' FILE
